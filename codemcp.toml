# codemcp configuration file
project_prompt = """
# Instructions
- MUST write typed python code
- MUST use the test command frequently to test your changes and fix them
- MUST use the integration-test command less frequently to test your changes and fix them
- NEVER use a --timeout higher than 90s to run integration-tests, NEVER
- MUST write end-to-end tests in integration-tests.py to test new features.
- Don't use nix-build, nix-instantiate, etc.. use the modern "nix" command.
- Don't use "<nixpkgs>", always use the flake in this repo as the "pkgs" set
- When leaving code incomplete, stubbed or mocked. Write a FIXME or TODO comment
explaining why.
- Before starting work, add what you're going to do to the TODO.md
document if it is not already there.
- If the use says "continue where you left off".
Use the 'branch_log' command before starting work to inspect the last commits.
Don't request all commits, just the 5 mostb revent ones
Ignore changes to codemcp.toml and under the ./ directory.
- Keep the *.md documents up to date with your changes when you're done with them.

## Final tasks

When your work is ready, you MUST:

1) Run the integration-tests.  ALL tests MUST pass! We allow no flaky tests here. Fix
them if they don't and repeat. If you get stuck write a FIXME
"""

[commands.format]
command = ["./run_format.sh"]
doc = "Accepts the name of the files that need formatting as arguments"

[commands.branch_log]
command = ["./run_branch_log.sh"]
doc = """
Show the log messages of the changes done in this branch with git log

Accepts an optional path list to restrict query to a specific set of files or
directories and rguments to limit the numer of commits or commit ranges
"""

[commands.branch_changed_files]
command = ["git", "diff", "--name-only", "origin/main...HEAD", "--"]
doc = """
List the file names that have been changed in this branch

Accepts an optional path list to restrict query to a specific set of files or
directories
"""

[commands.git_show]
command = ["git", "show"]
doc = """
Use "git show" to show the changes of a commit ot range of commits
"""

# Logging stuff
[logger]
# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
verbosity = "DEBUG"

[commands.test]
command = ["nix", "flake", "check"]

[commands.integration-test]
command = ["nix", "run", ".#integration-test", "--"]
doc = """
Runs the .#integration-test flake app with the arguments you pass"

Arguments are passed to the python script. Make sure you quote them properly!

Max --timeout you can add is 30s. This machine is fast
"""

[commands.git-mv]
command = ["git", "mv"]
doc = """
git mv

Use it to move files around efficiently
"""

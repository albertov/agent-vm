# codemcp configuration file
project_prompt = """
# You MUST always obey the following rules

## Read the README.md, TODO.md and other **.md documents to see what's going on.

## Use protolude and use unliftio when possible instead of base, specially for
exception handling. Never catch SomeExeption explicitly, use the `*Any`
functions from UnliftIO instead.

## Never use String unless mandated by an external library, always Text or
ByteString instead

## Use the newtype pattern to tag key Text, Int, etc..

## When told to "continue", or "continue where you left off",... use the
'branch_log' command to inspect the last commit you made and continue. I may
have left a commit after yours to help you out, inspect it and take it into
account.

## You can use the 'hls' server and the 'hoogle' command to search for documentation about symbols in
any external dependency we have available. You should implement functionality
using existing dependencies when possible.

## When editing cabal files, do not add version bounds to packages.

## You MUST always run the 'cabal_build' command on every package you modify and fix any
errors. Do this after every edit that affects haskell code and fix errors before
proceeding.

## You MUST always run the 'format' command on every Haskell file after testing
your edits and fix ALL the warnings and errors it reports.

## You MUST always use Generic deriving mechanisms for JSON/YAML
serialization, never hand-code it.  Use DeriveAnyClass and
DuplicateRecordFields for nice field names. Use OverloadedRecordDot extension to disambiguate types on record access

# Methodology

## Use a Type-Test-Driven-Approach, that is, when implementing new functions:

First of all, NO MOCKS! Only end2end for IO actions, do as many hspec property
tests as you want for what can (and should!) be tested that way. But stuff that
does IO should do it, if it needs a VM it should go into
agent-vm/integration-test/Main.hs, hear me? Otherwise add it for hspec to discover under
agent-vm/test, ok?

1. Get the type signatures right and the body as `notImplemented`.
   Always write a unit test or integration test for new
   functionality or when there are new cases to test.
2. Make sure it builds without errors.
3. Stop and ask me for feedback
4. If approved, flesh out the implemenation of the test body.
4. Run the test to see it fail
5. Implement the function body
6. Run the appropiate tests and see them pass, backtrack to 5 until they do

Then, and only then, proceed to implement another test body


# Final tasks

When your work is ready, you MUST:

# Run the integration-tests.  ALL tests MUST pass! We allow no flaky tests here. Fix
them if they don't and repeat. If you get stuck write a FIXME
"""

[commands.format]
command = ["nix", "fmt"]
doc = "Accepts the name of the files that need formatting as arguments"

[commands.branch_log]
command = ["./run_branch_log.sh"]
doc = """
Show the log messages of the changes done in this branch with git log

Accepts an optional path list to restrict query to a specific set of files or
directories and rguments to limit the numer of commits or commit ranges
"""

[commands.branch_changed_files]
command = ["git", "diff", "--name-only", "origin/main...HEAD", "--"]
doc = """
List the file names that have been changed in this branch

Accepts an optional path list to restrict query to a specific set of files or
directories
"""

[commands.git_show]
command = ["git", "show"]
doc = """
Use "git show" to show the changes of a commit ot range of commits
"""

# Logging stuff
[logger]
# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
verbosity = "DEBUG"

[commands.test]
command = ["nix", "flake", "check"]

[commands.cabal_build]
command = ["cabal", "build"]
doc = "Runs cabal build. Accepts the name of a single package as an argument to run their specific tests"

[commands.cabal_test]
command = ["cabal", "test"]
doc = "Runs cabal test. Accepts the name of a single package as an argument to run their specific tests"

[commands.lynx]
command = ["lynx", "-dump"]
doc = """
Use Lynx to view documentation links that hoogle shows
"""


[commands.hoogle]
command = ["hoogle"]
doc = """
Use Hoogle to search for symbols in available dependencies.

Before explaining the syntax of searches, we first give a list of example
searches with their meaning:

"map" Search for the text "map"
"con map" Search for the text "map" and the text "con"
"a -> a" Search for the type "a -> a"
":: a -> a" Search for the type "a -> a"
"a" Search for the text "a"
":: a" Search for the type "a"
"id :: a -> a" Search for the text "id" and the type "a -> a"
Searches can be either textual (a list of words), or by type (a type signature)
or both. A type search may optionally start with a "::" symbol. A search is
considered a text search unless it contains a combination of text and symbols,
or if it starts with (::). To search for both a type and a name, place a ::
between them, for example "undefined :: a"

Modules: Searches can be restricted to a particular module with +Module.Name, or
to avoid a module with -Module.Name. The command Module.Name.Foo is treated as
+Module.Name Foo.

Packages: Searches can be restricted to a particular package with +packagename,
or to avoid a package with -package. By default Hoogle will search a standard
set of packages.
"""

[commands.integration-test]
command = ["timeout", "90s", "nix", "run", ".#integration-test", "--"]
doc = """
Runs the .#integration-test flake app with the arguments you pass"

Arguments are passed to the python script. Make sure you quote them properly!
"""

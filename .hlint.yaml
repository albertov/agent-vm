# HLint configuration file

- functions:
  - {name: shell, within: [], message: "Highly vulnerable to code injection. Use proc instead. If you need standard input, make sure proc is compiled with ghc-option -threaded."}
  - {name: shells, within: [], message: "Highly vulnerable to code injection. Use procs instead. If you need standard input, make sure procs is compiled with ghc-option -threaded."}
  - {name: shellStrict, within: [], message: "Highly vulnerable to code injection. Use procStrict instead. If you need standard input, make sure procStrict is compiled with ghc-option -threaded."}
  - {name: shellStrictWithErr, within: [], message: "Highly vulnerable to code injection. Use procStrictWithErr instead. If you need standard input, make sure procStrictWithErr is compiled with ghc-option -threaded."}
  - {name: inshell, within: [], message: "Highly vulnerable to code injection. Use inproc instead. If you need standard input, make sure inproc is compiled with ghc-option -threaded."}
  - {name: inshellWithErr, within: [], message: "Highly vulnerable to code injection. Use inprocWithErr instead. If you need standard input, make sure inprocWithErr is compiled with ghc-option -threaded."}
  - {name: System.Process.callCommand, within: [], message: "Highly vulnerable to code injection. Use callProcess instead"}
  - {name: UnliftIO.callCommand, within: [], message: "Highly vulnerable to code injection. Use callProcess instead"}
  - {name: System.Process.spawnCommand, within: [], message: "Highly vulnerable to code injection. Use spawnProcess instead"}
  - {name: UnliftIO.spawnCommand, within: [], message: "Highly vulnerable to code injection. Use spawnProcess instead"}

  - {name: nub, within: [], message: "Has quadtratic complexity. Use Data.List.Extra.nubOrd instead (from extra package)"}
  - {name: nubBy, within: [], message: "Has quadtratic complexity. Use Data.List.Extra.nubOrdBy instead (from extra package)"}
  - {name: nubOn, within: [], message: "Has quadtratic complexity. Use Data.List.Extra.nubOrdOn instead (from extra package)"}
  - {name: foldl, within: [], message: "Leaks space. Use Data.List.foldl' instead with a strict (BangPattern'd) accumulator"}

  - {name: putStrLn, within: [], message: "Fine for debugging when developing but remove before committing or use plow-log instead"}
  - {name: hPutStrLn, within: ["AgentVM.Log"], message: "Fine for debugging when developing but remove before committing or use plow-log instead"}
  - {name: print, within: [], message: "Fine for debugging when developing but remove before committing or use plow-log instead"}
  - {name: hPrint, within: [], message: "Fine for debugging when developing but remove before committing or use plow-log instead"}
  - {name: putStr, within: [], message: "Fine for debugging when developing but remove before committing or use plow-log instead"}
  - {name: hPutStr, within: ["AgentVM.Log"], message: "Fine for debugging when developing but remove before committing or use plow-log instead"}

  - {name: forkIO, within: [], message: "Use Control.Concurrent.Async.withAsync (or async if withAsync not possible) from async package instead"}
  - {name: forkOn, within: [], message: "Use Control.Concurrent.Async.withAsyncOn (or asyncOn if withAsyncOn not possible) from async package instead"}
  - {name: forkIOWithUnmask, within: [], message: "Use Control.Concurrent.Async.withAsyncWithUnmask (or asyncWithUnmask if withAsyncWithUnmask not possible) from async package instead"}
  - {name: forkOnWithUnmask, within: [], message: "Use Control.Concurrent.Async.withAsyncOnWithUnmask (or asyncOnWithUnmask if withAsyncOnWithUnmask not possible) from async package instead"}

  - {name: decodeUtf8, within: [], message: "Use decodeUtf8' and handle the error case"}

  - {name: threadDelay, within: [], message: "May easily overflow in 32 bit systems. Use Control.Concurrent.Thread.Delay.delay from unbounded-delays package instead"}

- modules:
  - {name: System.Process, badidents: [ShellCommand], message: "Highly vulnerable to code injection. Use RawCommand instead"}
  - {name: Data.ByteString.Lazy, badidents: [readFile,getContents,hGetContents], message: "Avoid lazy IO. Use conduit instead or Data.ByteString if data will fit in memory"}
  - {name: Data.ByteString.Lazy.Char8, badidents: [readFile,getContents,hGetContents], message: "Avoid lazy IO. Use conduit instead or Data.ByteString.Char8 if data will fit in memory"}
  - {name: Data.Text.Lazy.IO, badidents: [readFile,getContents,hGetContents], message: "Avoid lazy IO. Use conduit instead or Data.Text.IO if data will fit in memory"}

  - {name: Debug.Trace, within: [], message: "Fine for debugging when developing but remove before commit or use plow-log instead"}

  - {name: System.Timeout, badidents: [timeout], message: "May easily overflow in 32 bit systems. Use Control.Concurrent.Timeout.timeout from unbounded-delays package instead"}
  - {name: UnliftIO.Timeout, badidents: [timeout], message: "May easily overflow in 32 bit systems. Use Control.Concurrent.Timeout.timeout from unbounded-delays package instead"}
  - {name: System.Timeout.Lifted, badidents: [timeout], message: "May easily overflow in 32 bit systems. Use Control.Concurrent.Timeout.timeout from unbounded-delays package instead"}


- group:
    name: forbidden
    enabled: true
    imports:
    - package base
    rules:

    # errors
  
    - error: {name: unsafeCoerce, within: [], message: "Use Data.Coerce.coerce instead"}
    - error: {name: unsafePerformIO, within: [], message: "Just don't"}

    # Style
    - warn: {lhs: pack, rhs: toS, name: Use toS for string conversions }
    - warn: {lhs: unpack, rhs: toS, name: Use toS for string conversions }
    - warn: {lhs: fromStrict, rhs: toS, name: Use toS for string conversions }
    - warn: {lhs: toStrict, rhs: toS, name: Use toS for string conversions }

    # Data.Bifoldable

    - warn: {lhs: bifoldr1, rhs: _FIXME, name: Avoid partial function}
    - warn: {lhs: bifoldl1, rhs: _FIXME, name: Avoid partial function}
    - warn: {lhs: bimaximum, rhs: _FIXME, name: Avoid partial function}
    - warn: {lhs: biminimum, rhs: _FIXME, name: Avoid partial function}
    - warn: {lhs: bimaximumBy, rhs: _FIXME, name: Avoid partial function}
    - warn: {lhs: biminimumBy, rhs: _FIXME, name: Avoid partial function}

    # Data.Bits

    - warn: {lhs: bitSize x, rhs: "case bitSizeMaybe x of Just n -> n; Nothing -> error _", name: Avoid partial function}
    - warn: {lhs: shiftL x b, rhs: shift x b, name: Avoid partial function}
    - warn: {lhs: shiftR x b, rhs: shift x (-b), name: Avoid partial function}
    - warn: {lhs: unsafeShiftL x b, rhs: shift x b, name: Avoid partial function}
    - warn: {lhs: unsafeShiftR x b, rhs: shift x (-b), name: Avoid partial function}
    - warn: {lhs: rotateL x b, rhs: rotate x b, name: Avoid partial function}
    - warn: {lhs: rotateR x b, rhs: rotate x (-b), name: Avoid partial function}

    # Data.Foldable

    - warn: {lhs: foldr1, rhs: _FIXME, name: Avoid partial function}
    - warn: {lhs: foldl1, rhs: _FIXME, name: Avoid partial function}
    - warn: {lhs: maximum, rhs: _FIXME, name: Avoid partial function}
    - warn: {lhs: minimum, rhs: _FIXME, name: Avoid partial function}
    - warn: {lhs: maximumBy, rhs: _FIXME, name: Avoid partial function}
    - warn: {lhs: minimumBy, rhs: _FIXME, name: Avoid partial function}

    # Data.List

    - warn: {lhs: head l, rhs: "case l of x:_ -> x; [] -> error _", name: Avoid partial function}
    - warn: {lhs: last l, rhs: "case reverse l of x:_ -> x; [] -> error _", name: Avoid partial function}
    - warn: {lhs: tail l, rhs: "case l of _:xs -> xs; [] -> error _", name: Avoid partial function}
    - warn: {lhs: init l, rhs: "maybe (error _) Data.List.NonEmpty.init . Data.List.NonEmpty.nonEmpty", name: Avoid partial function}
    - warn: {lhs: l !! n, rhs: "case drop n l of x:_ -> x; [] -> error _", name: Avoid partial function}

    # Data.List.NonEmpty

    - warn: {lhs: Data.List.NonEmpty.fromList l, rhs: "case nonEmpty l of Just xs -> xs; Nothing -> error _", name: Avoid partial function}

    # Data.Maybe

    - warn: {lhs: fromJust v, rhs: "case v of Just x -> x; Nothing -> error _", name: Avoid partial function}

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agent-vm"
version = "1.0.0"
description = "VM control tool for managing development VMs"
authors = [
    {name = "Agent VM Team", email = "dev@example.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Virtualization",
]

# Runtime dependencies
dependencies = [
    "typer>=0.9.0",
]

# Optional test dependencies
[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-mock>=3.0.0",
    "pytest-timeout>=2.0.0",
    "pytest-cov>=4.0.0",
]

[project.scripts]
agent-vm = "vm_controller:main"

[project.urls]
Homepage = "https://github.com/example/agent-vm"
Documentation = "https://github.com/example/agent-vm#readme"
Repository = "https://github.com/example/agent-vm.git"
"Bug Tracker" = "https://github.com/example/agent-vm/issues"

[tool.setuptools]
py-modules = ["vm_controller"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "vm: marks tests that require VM functionality",
    "ssh: marks tests that require SSH connectivity",
    "git: marks tests that require git functionality",
]
timeout = 300
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "*/tests/*",
    "test_*.py",
    "*_test.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
